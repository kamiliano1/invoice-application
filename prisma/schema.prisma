// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum InvoiceStatus {
  draft
  paid
  pending
}

model Account {
  id                 String    @id @default(cuid()) @map("_id")
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  String
  avatar    String
  invoice   Invoice[]
  Account   Account[]
}

model Invoice {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  invoiceId     String
  invoiceDbId   String         @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  paymentDue    DateTime
  clientName    String
  status        InvoiceStatus  @default(pending)
  total         Int
  description   String
  paymentTerms  String
  clientEmail   String
  user          User           @relation(fields: [invoiceDbId], references: [id], onDelete: Cascade)
  senderAddress SenderAddress?
  clientAddress ClientAddress?
  items         Items[]

  @@unique([invoiceId, invoiceDbId])
}

model SenderAddress {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  street   String
  city     String
  postCode String
  country  String
  uniqueId String  @unique @db.ObjectId
  invoice  Invoice @relation(fields: [uniqueId], references: [id], onDelete: Cascade)
}

model ClientAddress {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  street   String
  city     String
  postCode String
  country  String
  uniqueId String  @unique @db.ObjectId
  invoice  Invoice @relation(fields: [uniqueId], references: [id], onDelete: Cascade)
}

model Items {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  quantity Float
  price    Int
  total    Int
  itemId   String  @db.ObjectId
  invoice  Invoice @relation(fields: [itemId], references: [id], onDelete: Cascade)
}
